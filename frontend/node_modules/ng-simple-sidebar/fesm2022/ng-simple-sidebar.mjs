import * as i0 from '@angular/core';
import { Injectable, Component, Input, EventEmitter, Output, HostListener, NgModule } from '@angular/core';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i2 from '@angular/router';
import { RouterModule } from '@angular/router';
import { map, filter } from 'rxjs/operators';
import { BehaviorSubject, Subject, combineLatest } from 'rxjs';

var SimpleSidebarPosition;
(function (SimpleSidebarPosition) {
    SimpleSidebarPosition["top"] = "top";
    SimpleSidebarPosition["bottom"] = "bottom";
})(SimpleSidebarPosition || (SimpleSidebarPosition = {}));

class NgSimpleSidebarService {
    constructor() {
        this.STATE_CHANGE$ = new BehaviorSubject(false);
        this.CONFIGURATION$ = new BehaviorSubject(null);
        this.ITEMS_TOP$ = new BehaviorSubject([]);
        this.ITEMS_BOTTOM$ = new BehaviorSubject([]);
    }
    open() {
        this.STATE_CHANGE$.next(true);
    }
    close() {
        this.STATE_CHANGE$.next(false);
    }
    isOpen() {
        return this.STATE_CHANGE$;
    }
    configure(configuration) {
        this.CONFIGURATION$.next(this.setConfigDefaults(configuration));
    }
    getConfiguration() {
        return this.CONFIGURATION$;
    }
    addItems(items) {
        this.ITEMS_BOTTOM$.next(items.filter((i) => i.position === SimpleSidebarPosition.bottom));
        this.ITEMS_TOP$.next(items.filter((i) => i.position === SimpleSidebarPosition.top));
    }
    getTopsideItems() {
        return this.ITEMS_TOP$;
    }
    getBotsideItems() {
        return this.ITEMS_BOTTOM$;
    }
    setConfigDefaults(configuration) {
        return {
            openIcon: configuration.openIcon,
            closeIcon: configuration.closeIcon,
            colors: this.setColorDefaults(configuration.colors || {}),
            closeAfterClick: configuration.hasOwnProperty('closeAfterClick')
                ? configuration.closeAfterClick
                : true,
            mobile: configuration.hasOwnProperty('mobile')
                ? configuration.mobile
                : false,
            position: configuration.position || 'sticky',
            mobileTitle: configuration.mobileTitle || null,
        };
    }
    setColorDefaults(colors) {
        return {
            darkMode: colors.darkMode || false,
            background: colors.background || '#eee',
            font: colors.font || '#000',
            darkModeBackground: '#333',
            darkModeFont: '#fff',
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.4", ngImport: i0, type: NgSimpleSidebarService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.1.4", ngImport: i0, type: NgSimpleSidebarService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.4", ngImport: i0, type: NgSimpleSidebarService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

class SidebarItemIconComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.4", ngImport: i0, type: SidebarItemIconComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.1.4", type: SidebarItemIconComponent, selector: "lib-sidebar-item-icon", inputs: { item: "item", isOpen: "isOpen" }, ngImport: i0, template: `
        <i *ngIf="item.icon" class="menu-icon-item" [class]="item.icon"></i>
        <span *ngIf="isOpen" class="menu-item-label">{{ item.name }}</span>
    `, isInline: true, styles: [".menu-icon-item{font-size:30px}.menu-icon-item{display:inline-block;margin-right:15px}.menu-item-label{vertical-align:super}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.4", ngImport: i0, type: SidebarItemIconComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-sidebar-item-icon', template: `
        <i *ngIf="item.icon" class="menu-icon-item" [class]="item.icon"></i>
        <span *ngIf="isOpen" class="menu-item-label">{{ item.name }}</span>
    `, styles: [".menu-icon-item{font-size:30px}.menu-icon-item{display:inline-block;margin-right:15px}.menu-item-label{vertical-align:super}\n"] }]
        }], propDecorators: { item: [{
                type: Input
            }], isOpen: [{
                type: Input
            }] } });

class SidebarItemComponent {
    constructor() {
        this.clickAction = new EventEmitter();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.4", ngImport: i0, type: SidebarItemComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.1.4", type: SidebarItemComponent, selector: "lib-sidebar-item", inputs: { item: "item", colors: "colors", isOpen: "isOpen" }, outputs: { clickAction: "clickAction" }, ngImport: i0, template: `
        <a
            *ngIf="item.routerLink"
            (click)="clickAction.emit()"
            [ngStyle]="{ color: colors.fColor }"
            [ngClass]="{ 'dock-open-item': isOpen }"
            [routerLink]="item.routerLink"
            [title]="item.name"
            class="menu-item pointer"
        >
            <lib-sidebar-item-icon
                [item]="item"
                [isOpen]="isOpen"
            ></lib-sidebar-item-icon>
        </a>
        <a
            *ngIf="item.url"
            (click)="clickAction.emit()"
            [ngStyle]="{ color: colors.fColor }"
            [ngClass]="{ 'dock-open-item': isOpen }"
            [target]="item.target"
            [href]="item.url"
            [title]="item.name"
            class="menu-item pointer"
        >
            <lib-sidebar-item-icon
                [item]="item"
                [isOpen]="isOpen"
            ></lib-sidebar-item-icon>
        </a>
    `, isInline: true, styles: [".menu-item{display:block;text-decoration:none;font-weight:lighter;padding-top:8px;padding-bottom:8px;height:40px}.menu-item:active,.menu-item:visited,.menu-item:link{text-decoration:none}.menu-item:hover{font-weight:400;text-decoration:none}.pointer{cursor:pointer}.dock-open-item{min-width:200px}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "directive", type: i2.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "info", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "component", type: SidebarItemIconComponent, selector: "lib-sidebar-item-icon", inputs: ["item", "isOpen"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.4", ngImport: i0, type: SidebarItemComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-sidebar-item', template: `
        <a
            *ngIf="item.routerLink"
            (click)="clickAction.emit()"
            [ngStyle]="{ color: colors.fColor }"
            [ngClass]="{ 'dock-open-item': isOpen }"
            [routerLink]="item.routerLink"
            [title]="item.name"
            class="menu-item pointer"
        >
            <lib-sidebar-item-icon
                [item]="item"
                [isOpen]="isOpen"
            ></lib-sidebar-item-icon>
        </a>
        <a
            *ngIf="item.url"
            (click)="clickAction.emit()"
            [ngStyle]="{ color: colors.fColor }"
            [ngClass]="{ 'dock-open-item': isOpen }"
            [target]="item.target"
            [href]="item.url"
            [title]="item.name"
            class="menu-item pointer"
        >
            <lib-sidebar-item-icon
                [item]="item"
                [isOpen]="isOpen"
            ></lib-sidebar-item-icon>
        </a>
    `, styles: [".menu-item{display:block;text-decoration:none;font-weight:lighter;padding-top:8px;padding-bottom:8px;height:40px}.menu-item:active,.menu-item:visited,.menu-item:link{text-decoration:none}.menu-item:hover{font-weight:400;text-decoration:none}.pointer{cursor:pointer}.dock-open-item{min-width:200px}\n"] }]
        }], propDecorators: { item: [{
                type: Input
            }], colors: [{
                type: Input
            }], isOpen: [{
                type: Input
            }], clickAction: [{
                type: Output
            }] } });

class SidebarContainerComponent {
    constructor() {
        this.closeDock = new EventEmitter();
    }
    linkClickAction() {
        if (this.configuration.closeAfterClick) {
            this.closeDock.emit();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.4", ngImport: i0, type: SidebarContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.1.4", type: SidebarContainerComponent, selector: "lib-sidebar-container", inputs: { configuration: "configuration", itemsTop: "itemsTop", itemsBottom: "itemsBottom", isOpen: "isOpen", colors: "colors" }, outputs: { closeDock: "closeDock" }, ngImport: i0, template: `
        <div class="sidebar-container">
            <!-- top side menu entries -->
            <lib-sidebar-item
                *ngFor="let item of itemsTop"
                [item]="item"
                [colors]="colors"
                [isOpen]="isOpen"
                (clickAction)="linkClickAction()"
            ></lib-sidebar-item>
        </div>
        <div class="sidebar-container sidebar-container-end">
            <!-- bottom side menu entries -->
            <lib-sidebar-item
                *ngFor="let item of itemsBottom"
                [item]="item"
                [colors]="colors"
                [isOpen]="isOpen"
                (clickAction)="linkClickAction()"
            ></lib-sidebar-item>
        </div>
    `, isInline: true, styles: [".sidebar-container{padding-top:20px}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: SidebarItemComponent, selector: "lib-sidebar-item", inputs: ["item", "colors", "isOpen"], outputs: ["clickAction"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.4", ngImport: i0, type: SidebarContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-sidebar-container', template: `
        <div class="sidebar-container">
            <!-- top side menu entries -->
            <lib-sidebar-item
                *ngFor="let item of itemsTop"
                [item]="item"
                [colors]="colors"
                [isOpen]="isOpen"
                (clickAction)="linkClickAction()"
            ></lib-sidebar-item>
        </div>
        <div class="sidebar-container sidebar-container-end">
            <!-- bottom side menu entries -->
            <lib-sidebar-item
                *ngFor="let item of itemsBottom"
                [item]="item"
                [colors]="colors"
                [isOpen]="isOpen"
                (clickAction)="linkClickAction()"
            ></lib-sidebar-item>
        </div>
    `, styles: [".sidebar-container{padding-top:20px}\n"] }]
        }], ctorParameters: () => [], propDecorators: { configuration: [{
                type: Input
            }], itemsTop: [{
                type: Input
            }], itemsBottom: [{
                type: Input
            }], isOpen: [{
                type: Input
            }], colors: [{
                type: Input
            }], closeDock: [{
                type: Output
            }] } });

const PADDING = 30; // reduce amount because of dock padding
const DEFAULT_WIDTH = '250px';
const DEFAULT_DOCK_WIDTH = '30px';
class NgSimpleSidebarComponent {
    onResize() {
        this.calculateDimensions();
    }
    constructor(simpleSidebarService) {
        this.simpleSidebarService = simpleSidebarService;
        this.isOpen = false;
        this.items = [];
        this.configuration$ = this.simpleSidebarService.getConfiguration();
        this.isOpen$ = this.simpleSidebarService.isOpen();
        this.itemsTop$ = this.simpleSidebarService.getTopsideItems();
        this.itemsBottom$ = this.simpleSidebarService.getBotsideItems();
        this.dimensions$ = new Subject();
        this.colors$ = this.configuration$.pipe(map((c) => {
            return {
                darkMode: c.colors.darkMode,
                fColor: c.colors.darkMode
                    ? c.colors.darkModeFont
                    : c.colors.font,
                bColor: c.colors.darkMode
                    ? c.colors.darkModeBackground
                    : c.colors.background,
            };
        }));
        this.sidedbarStyle$ = combineLatest([
            this.configuration$,
            this.colors$,
            this.isOpen$,
            this.dimensions$,
        ]).pipe(map((r) => ({ conf: r[0], colors: r[1], isOpen: r[2], dim: r[3] })), filter((ctx) => ctx.conf.mobile), map((ctx) => {
            return {
                'background-color': ctx.colors.bColor,
                width: ctx.isOpen ? `${ctx.dim.innerWidth}px` : '0',
                height: `${ctx.dim.innerHeight}px`,
            };
        }));
        this.dockStyle$ = combineLatest([
            this.configuration$,
            this.colors$,
            this.isOpen$,
            this.dimensions$,
        ]).pipe(map((r) => ({ conf: r[0], colors: r[1], isOpen: r[2], dim: r[3] })), map((ctx) => {
            return {
                'background-color': ctx.colors.bColor,
                color: ctx.colors.fColor,
                height: ctx.conf.mobile
                    ? DEFAULT_DOCK_WIDTH
                    : `${ctx.dim.innerHeight}px`,
                width: this.calcDockWidth(ctx.conf, ctx.isOpen, ctx.dim),
                position: ctx.conf.mobile ? 'fixed' : ctx.conf.position,
            };
        }));
        this.calculateDimensions();
    }
    ngOnChanges(changes) {
        if (changes.isOpen && changes.isOpen.hasOwnProperty('currentValue')) {
            changes.isOpen.currentValue
                ? this.simpleSidebarService.close()
                : this.simpleSidebarService.open();
        }
        if (changes.items && changes.items.currentValue) {
            this.simpleSidebarService.addItems(changes.items.currentValue);
        }
        if (changes.configuration && changes.configuration.currentValue) {
            this.simpleSidebarService.configure(changes.configuration.currentValue);
        }
    }
    ngAfterContentChecked() {
        this.calculateDimensions();
    }
    openSidebar() {
        this.simpleSidebarService.open();
    }
    closeSidebar() {
        this.simpleSidebarService.close();
    }
    calculateDimensions() {
        this.dimensions$.next({
            innerHeight: window.innerHeight - PADDING,
            innerWidth: window.innerWidth - this.getScrollbarWidth() - PADDING,
        });
    }
    getScrollbarWidth() {
        return window.innerWidth - document.documentElement.clientWidth;
    }
    calcDockWidth(conf, isOpen, dim) {
        if (isOpen && !conf.mobile) {
            return DEFAULT_WIDTH;
        }
        if (conf.mobile) {
            return `${dim.innerWidth}px`;
        }
        else {
            return DEFAULT_DOCK_WIDTH;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.4", ngImport: i0, type: NgSimpleSidebarComponent, deps: [{ token: NgSimpleSidebarService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.1.4", type: NgSimpleSidebarComponent, selector: "lib-ng-simple-sidebar", inputs: { isOpen: "isOpen", items: "items", configuration: "configuration" }, host: { listeners: { "window:resize": "onResize()" } }, usesOnChanges: true, ngImport: i0, template: "<div\r\n    *ngIf=\"configuration$ | async as conf\"\r\n    class=\"dock\"\r\n    [ngClass]=\"{ 'dock-open': isOpen$ | async, 'dock-mobile': conf.mobile }\"\r\n    [ngStyle]=\"dockStyle$ | async\"\r\n>\r\n    <span *ngIf=\"conf.mobile && conf.mobileTitle\">{{ conf.mobileTitle }}</span>\r\n\r\n    <!-- default items, like open/bottom buttons -->\r\n    <div class=\"sidebar-header\">\r\n        <i\r\n            *ngIf=\"(isOpen$ | async) && conf.closeIcon\"\r\n            class=\"menu-opener pointer\"\r\n            [class]=\"conf.closeIcon\"\r\n            (click)=\"closeSidebar()\"\r\n        ></i>\r\n        <i\r\n            *ngIf=\"!(isOpen$ | async) && conf.openIcon\"\r\n            class=\"menu-opener pointer\"\r\n            [class]=\"conf.openIcon\"\r\n            (click)=\"openSidebar()\"\r\n        ></i>\r\n    </div>\r\n    <lib-sidebar-container\r\n        [configuration]=\"configuration$ | async\"\r\n        [itemsBottom]=\"itemsBottom$ | async\"\r\n        [itemsTop]=\"itemsTop$ | async\"\r\n        [isOpen]=\"isOpen$ | async\"\r\n        [colors]=\"colors$ | async\"\r\n        [ngStyle]=\"sidedbarStyle$ | async\"\r\n        (closeDock)=\"closeSidebar()\"\r\n    ></lib-sidebar-container>\r\n</div>\r\n", styles: [".dock{display:flex;flex-direction:column;left:0;top:0;padding:15px;transition:width .2s;box-shadow:1px 1px 5px #0000004d}.dock-open{width:250px}lib-sidebar-container{display:flex;flex-direction:column;justify-content:space-between;height:100%}.sidebar-container,.sidebar-header{display:flex;flex-direction:column}.sidebar-container{flex-grow:1}.sidebar-container-end{justify-content:flex-end}.menu-opener{font-size:30px}.pointer{cursor:pointer}.dock-mobile{display:flex;flex-direction:row;justify-content:space-between;font-size:2rem}.dock-mobile .sidebar-header,.dock-mobile .sidebar-container{flex-direction:row-reverse}.dock-mobile lib-sidebar-container{position:fixed;display:none}.dock-open.dock-mobile lib-sidebar-container{display:flex;padding:50px;top:60px;left:0;opacity:.9}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "component", type: SidebarContainerComponent, selector: "lib-sidebar-container", inputs: ["configuration", "itemsTop", "itemsBottom", "isOpen", "colors"], outputs: ["closeDock"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.4", ngImport: i0, type: NgSimpleSidebarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-ng-simple-sidebar', template: "<div\r\n    *ngIf=\"configuration$ | async as conf\"\r\n    class=\"dock\"\r\n    [ngClass]=\"{ 'dock-open': isOpen$ | async, 'dock-mobile': conf.mobile }\"\r\n    [ngStyle]=\"dockStyle$ | async\"\r\n>\r\n    <span *ngIf=\"conf.mobile && conf.mobileTitle\">{{ conf.mobileTitle }}</span>\r\n\r\n    <!-- default items, like open/bottom buttons -->\r\n    <div class=\"sidebar-header\">\r\n        <i\r\n            *ngIf=\"(isOpen$ | async) && conf.closeIcon\"\r\n            class=\"menu-opener pointer\"\r\n            [class]=\"conf.closeIcon\"\r\n            (click)=\"closeSidebar()\"\r\n        ></i>\r\n        <i\r\n            *ngIf=\"!(isOpen$ | async) && conf.openIcon\"\r\n            class=\"menu-opener pointer\"\r\n            [class]=\"conf.openIcon\"\r\n            (click)=\"openSidebar()\"\r\n        ></i>\r\n    </div>\r\n    <lib-sidebar-container\r\n        [configuration]=\"configuration$ | async\"\r\n        [itemsBottom]=\"itemsBottom$ | async\"\r\n        [itemsTop]=\"itemsTop$ | async\"\r\n        [isOpen]=\"isOpen$ | async\"\r\n        [colors]=\"colors$ | async\"\r\n        [ngStyle]=\"sidedbarStyle$ | async\"\r\n        (closeDock)=\"closeSidebar()\"\r\n    ></lib-sidebar-container>\r\n</div>\r\n", styles: [".dock{display:flex;flex-direction:column;left:0;top:0;padding:15px;transition:width .2s;box-shadow:1px 1px 5px #0000004d}.dock-open{width:250px}lib-sidebar-container{display:flex;flex-direction:column;justify-content:space-between;height:100%}.sidebar-container,.sidebar-header{display:flex;flex-direction:column}.sidebar-container{flex-grow:1}.sidebar-container-end{justify-content:flex-end}.menu-opener{font-size:30px}.pointer{cursor:pointer}.dock-mobile{display:flex;flex-direction:row;justify-content:space-between;font-size:2rem}.dock-mobile .sidebar-header,.dock-mobile .sidebar-container{flex-direction:row-reverse}.dock-mobile lib-sidebar-container{position:fixed;display:none}.dock-open.dock-mobile lib-sidebar-container{display:flex;padding:50px;top:60px;left:0;opacity:.9}\n"] }]
        }], ctorParameters: () => [{ type: NgSimpleSidebarService }], propDecorators: { isOpen: [{
                type: Input
            }], items: [{
                type: Input
            }], configuration: [{
                type: Input
            }], onResize: [{
                type: HostListener,
                args: ['window:resize']
            }] } });

class NgSimpleSidebarModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.4", ngImport: i0, type: NgSimpleSidebarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "18.1.4", ngImport: i0, type: NgSimpleSidebarModule, declarations: [NgSimpleSidebarComponent, SidebarItemComponent, SidebarItemIconComponent, SidebarContainerComponent], imports: [CommonModule, RouterModule], exports: [NgSimpleSidebarComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "18.1.4", ngImport: i0, type: NgSimpleSidebarModule, imports: [CommonModule, RouterModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.4", ngImport: i0, type: NgSimpleSidebarModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NgSimpleSidebarComponent, SidebarItemComponent, SidebarItemIconComponent, SidebarContainerComponent],
                    imports: [CommonModule, RouterModule],
                    exports: [NgSimpleSidebarComponent]
                }]
        }] });

/**
 * Configuration Object for SimpleSidebar
 */
class SimpleSidebarConfiguration {
}

/*
 * Public API Surface of ng-simple-sidebar
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgSimpleSidebarComponent, NgSimpleSidebarModule, NgSimpleSidebarService, SimpleSidebarConfiguration, SimpleSidebarPosition };
//# sourceMappingURL=ng-simple-sidebar.mjs.map
