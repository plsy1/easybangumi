{"version":3,"file":"ng-simple-sidebar.mjs","sources":["../../../projects/ng-simple-sidebar/src/lib/models/sidebar-item.ts","../../../projects/ng-simple-sidebar/src/lib/ng-simple-sidebar.service.ts","../../../projects/ng-simple-sidebar/src/lib/components/sidebar-item-icon.component.ts","../../../projects/ng-simple-sidebar/src/lib/components/sidebar-item.component.ts","../../../projects/ng-simple-sidebar/src/lib/components/sidebar-container.component.ts","../../../projects/ng-simple-sidebar/src/lib/ng-simple-sidebar.component.ts","../../../projects/ng-simple-sidebar/src/lib/ng-simple-sidebar.component.html","../../../projects/ng-simple-sidebar/src/lib/ng-simple-sidebar.module.ts","../../../projects/ng-simple-sidebar/src/lib/models/sidebar-configuration.ts","../../../projects/ng-simple-sidebar/src/public-api.ts","../../../projects/ng-simple-sidebar/src/ng-simple-sidebar.ts"],"sourcesContent":["/**\r\n * Definition of a simple sidebar item.\r\n */\r\nexport interface SimpleSidebarItem {\r\n    /**\r\n     * item name\r\n     */\r\n    name: string;\r\n    /**\r\n     * item url (optional, could be a uri or a full url)\r\n     */\r\n    url?: string;\r\n    /**\r\n     * item routerLink (optional)\r\n     */\r\n    routerLink?: string[];\r\n    /**\r\n     * item icon\r\n     */\r\n    icon: string;\r\n    /**\r\n     * item target (optional, equals to the HTML5 target of an \"a\" tag)\r\n     */\r\n    target?: string;\r\n    /**\r\n     * items position (optional, container top or botton, default top)\r\n     */\r\n    position?: string;\r\n}\r\n\r\nexport enum SimpleSidebarPosition {\r\n    top = 'top',\r\n    bottom = 'bottom'\r\n}\r\n","import { Injectable } from '@angular/core';\n\nimport {\n    SimpleSidebarConfiguration,\n    SimpleSidebarColors,\n} from './models/sidebar-configuration';\nimport {\n    SimpleSidebarItem,\n    SimpleSidebarPosition,\n} from './models/sidebar-item';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class NgSimpleSidebarService {\n    private STATE_CHANGE$ = new BehaviorSubject<boolean>(false);\n    private CONFIGURATION$ = new BehaviorSubject<SimpleSidebarConfiguration>(\n        null\n    );\n    private ITEMS_TOP$ = new BehaviorSubject<SimpleSidebarItem[]>([]);\n    private ITEMS_BOTTOM$ = new BehaviorSubject<SimpleSidebarItem[]>([]);\n\n    open() {\n        this.STATE_CHANGE$.next(true);\n    }\n\n    close() {\n        this.STATE_CHANGE$.next(false);\n    }\n\n    isOpen(): BehaviorSubject<boolean> {\n        return this.STATE_CHANGE$;\n    }\n\n    configure(configuration: SimpleSidebarConfiguration) {\n        this.CONFIGURATION$.next(this.setConfigDefaults(configuration));\n    }\n\n    getConfiguration(): BehaviorSubject<SimpleSidebarConfiguration> {\n        return this.CONFIGURATION$;\n    }\n\n    addItems(items: SimpleSidebarItem[]) {\n        this.ITEMS_BOTTOM$.next(\n            items.filter((i) => i.position === SimpleSidebarPosition.bottom)\n        );\n        this.ITEMS_TOP$.next(\n            items.filter((i) => i.position === SimpleSidebarPosition.top)\n        );\n    }\n\n    getTopsideItems(): BehaviorSubject<SimpleSidebarItem[]> {\n        return this.ITEMS_TOP$;\n    }\n\n    getBotsideItems(): BehaviorSubject<SimpleSidebarItem[]> {\n        return this.ITEMS_BOTTOM$;\n    }\n\n    private setConfigDefaults(\n        configuration: SimpleSidebarConfiguration\n    ): SimpleSidebarConfiguration {\n        return {\n            openIcon: configuration.openIcon,\n            closeIcon: configuration.closeIcon,\n            colors: this.setColorDefaults(\n                configuration.colors || ({} as SimpleSidebarColors)\n            ),\n            closeAfterClick: configuration.hasOwnProperty('closeAfterClick')\n                ? configuration.closeAfterClick\n                : true,\n            mobile: configuration.hasOwnProperty('mobile')\n                ? configuration.mobile\n                : false,\n            position: configuration.position || 'sticky',\n            mobileTitle: configuration.mobileTitle || null,\n        };\n    }\n\n    private setColorDefaults(colors: SimpleSidebarColors): SimpleSidebarColors {\n        return {\n            darkMode: colors.darkMode || false,\n            background: colors.background || '#eee',\n            font: colors.font || '#000',\n            darkModeBackground: '#333',\n            darkModeFont: '#fff',\n        };\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { SimpleSidebarItem } from '../models/sidebar-item';\n\n@Component({\n    selector: 'lib-sidebar-item-icon',\n    template: `\n        <i *ngIf=\"item.icon\" class=\"menu-icon-item\" [class]=\"item.icon\"></i>\n        <span *ngIf=\"isOpen\" class=\"menu-item-label\">{{ item.name }}</span>\n    `,\n    styles: [\n        `\n            .menu-icon-item {\n                font-size: 30px;\n            }\n\n            .menu-icon-item {\n                display: inline-block;\n                margin-right: 15px;\n            }\n\n            .menu-item-label {\n                vertical-align: super;\n            }\n        `\n    ]\n})\nexport class SidebarItemIconComponent {\n    @Input() item: SimpleSidebarItem;\n    @Input() isOpen: boolean;\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { SimpleSidebarItem } from '../models/sidebar-item';\nimport { SimpleSidebarAbstractColors } from '../models/sidebar-configuration';\n\n@Component({\n    selector: 'lib-sidebar-item',\n    template: `\n        <a\n            *ngIf=\"item.routerLink\"\n            (click)=\"clickAction.emit()\"\n            [ngStyle]=\"{ color: colors.fColor }\"\n            [ngClass]=\"{ 'dock-open-item': isOpen }\"\n            [routerLink]=\"item.routerLink\"\n            [title]=\"item.name\"\n            class=\"menu-item pointer\"\n        >\n            <lib-sidebar-item-icon\n                [item]=\"item\"\n                [isOpen]=\"isOpen\"\n            ></lib-sidebar-item-icon>\n        </a>\n        <a\n            *ngIf=\"item.url\"\n            (click)=\"clickAction.emit()\"\n            [ngStyle]=\"{ color: colors.fColor }\"\n            [ngClass]=\"{ 'dock-open-item': isOpen }\"\n            [target]=\"item.target\"\n            [href]=\"item.url\"\n            [title]=\"item.name\"\n            class=\"menu-item pointer\"\n        >\n            <lib-sidebar-item-icon\n                [item]=\"item\"\n                [isOpen]=\"isOpen\"\n            ></lib-sidebar-item-icon>\n        </a>\n    `,\n    styles: [\n        `\n            .menu-item {\n                display: block;\n                text-decoration: none;\n                font-weight: lighter;\n                padding-top: 8px;\n                padding-bottom: 8px;\n                height: 40px;\n            }\n\n            .menu-item:active,\n            .menu-item:visited,\n            .menu-item:link {\n                text-decoration: none;\n            }\n\n            .menu-item:hover {\n                font-weight: normal;\n                text-decoration: none;\n            }\n\n            .pointer {\n                cursor: pointer;\n            }\n\n            .dock-open-item {\n                min-width: 200px;\n            }\n        `\n    ]\n})\nexport class SidebarItemComponent {\n    @Input() item: SimpleSidebarItem;\n    @Input() colors: SimpleSidebarAbstractColors;\n    @Input() isOpen: boolean;\n\n    @Output() clickAction: EventEmitter<void> = new EventEmitter<void>();\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { SimpleSidebarItem } from '../models/sidebar-item';\nimport { SimpleSidebarColors, SimpleSidebarConfiguration } from '../models/sidebar-configuration';\n\n@Component({\n    selector: 'lib-sidebar-container',\n    template: `\n        <div class=\"sidebar-container\">\n            <!-- top side menu entries -->\n            <lib-sidebar-item\n                *ngFor=\"let item of itemsTop\"\n                [item]=\"item\"\n                [colors]=\"colors\"\n                [isOpen]=\"isOpen\"\n                (clickAction)=\"linkClickAction()\"\n            ></lib-sidebar-item>\n        </div>\n        <div class=\"sidebar-container sidebar-container-end\">\n            <!-- bottom side menu entries -->\n            <lib-sidebar-item\n                *ngFor=\"let item of itemsBottom\"\n                [item]=\"item\"\n                [colors]=\"colors\"\n                [isOpen]=\"isOpen\"\n                (clickAction)=\"linkClickAction()\"\n            ></lib-sidebar-item>\n        </div>\n    `,\n    styles: [\n        `\n            .sidebar-container {\n                padding-top: 20px;\n            }\n        `\n    ]\n})\nexport class SidebarContainerComponent {\n    @Input() configuration: SimpleSidebarConfiguration;\n    @Input() itemsTop: SimpleSidebarItem[];\n    @Input() itemsBottom: SimpleSidebarItem[];\n    @Input() isOpen: boolean;\n    @Input() colors: SimpleSidebarColors;\n\n    @Output() closeDock: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    constructor() {}\n\n    linkClickAction() {\n        if (this.configuration.closeAfterClick) {\n            this.closeDock.emit();\n        }\n    }\n}\n","import {\n    Component,\n    Input,\n    OnChanges,\n    SimpleChanges,\n    HostListener,\n    AfterContentChecked,\n} from '@angular/core';\nimport { map, filter } from 'rxjs/operators';\n\nimport { SimpleSidebarItem } from './models/sidebar-item';\nimport { SimpleSidebarConfiguration } from './models/sidebar-configuration';\nimport { NgSimpleSidebarService } from './ng-simple-sidebar.service';\nimport { combineLatest, Subject } from 'rxjs';\n\nconst PADDING = 30; // reduce amount because of dock padding\nconst DEFAULT_WIDTH = '250px';\nconst DEFAULT_DOCK_WIDTH = '30px';\n\ninterface Dimensions {\n    innerHeight: number;\n    innerWidth: number;\n}\n\n@Component({\n    selector: 'lib-ng-simple-sidebar',\n    templateUrl: './ng-simple-sidebar.component.html',\n    styleUrls: ['./ng-simple-sidebar.component.css'],\n})\nexport class NgSimpleSidebarComponent\n    implements OnChanges, AfterContentChecked {\n    @Input() isOpen = false;\n    @Input() items: SimpleSidebarItem[] = [];\n    @Input() configuration: SimpleSidebarConfiguration;\n\n    configuration$ = this.simpleSidebarService.getConfiguration();\n    isOpen$ = this.simpleSidebarService.isOpen();\n    itemsTop$ = this.simpleSidebarService.getTopsideItems();\n    itemsBottom$ = this.simpleSidebarService.getBotsideItems();\n\n    dimensions$ = new Subject<Dimensions>();\n\n    colors$ = this.configuration$.pipe(\n        map((c) => {\n            return {\n                darkMode: c.colors.darkMode,\n                fColor: c.colors.darkMode\n                    ? c.colors.darkModeFont\n                    : c.colors.font,\n                bColor: c.colors.darkMode\n                    ? c.colors.darkModeBackground\n                    : c.colors.background,\n            };\n        })\n    );\n\n    sidedbarStyle$ = combineLatest([\n        this.configuration$,\n        this.colors$,\n        this.isOpen$,\n        this.dimensions$,\n    ]).pipe(\n        map((r) => ({ conf: r[0], colors: r[1], isOpen: r[2], dim: r[3] })),\n        filter((ctx) => ctx.conf.mobile),\n        map((ctx) => {\n            return {\n                'background-color': ctx.colors.bColor,\n                width: ctx.isOpen ? `${ctx.dim.innerWidth}px` : '0',\n                height: `${ctx.dim.innerHeight}px`,\n            };\n        })\n    );\n\n    dockStyle$ = combineLatest([\n        this.configuration$,\n        this.colors$,\n        this.isOpen$,\n        this.dimensions$,\n    ]).pipe(\n        map((r) => ({ conf: r[0], colors: r[1], isOpen: r[2], dim: r[3] })),\n        map((ctx) => {\n            return {\n                'background-color': ctx.colors.bColor,\n                color: ctx.colors.fColor,\n                height: ctx.conf.mobile\n                    ? DEFAULT_DOCK_WIDTH\n                    : `${ctx.dim.innerHeight}px`,\n                width: this.calcDockWidth(ctx.conf, ctx.isOpen, ctx.dim),\n                position: ctx.conf.mobile ? 'fixed' : ctx.conf.position,\n            };\n        })\n    );\n\n    @HostListener('window:resize')\n    onResize() {\n        this.calculateDimensions();\n    }\n\n    constructor(private simpleSidebarService: NgSimpleSidebarService) {\n        this.calculateDimensions();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.isOpen && changes.isOpen.hasOwnProperty('currentValue')) {\n            changes.isOpen.currentValue\n                ? this.simpleSidebarService.close()\n                : this.simpleSidebarService.open();\n        }\n\n        if (changes.items && changes.items.currentValue) {\n            this.simpleSidebarService.addItems(changes.items.currentValue);\n        }\n\n        if (changes.configuration && changes.configuration.currentValue) {\n            this.simpleSidebarService.configure(\n                changes.configuration.currentValue\n            );\n        }\n    }\n\n    ngAfterContentChecked() {\n        this.calculateDimensions();\n    }\n\n    openSidebar() {\n        this.simpleSidebarService.open();\n    }\n\n    closeSidebar() {\n        this.simpleSidebarService.close();\n    }\n\n    private calculateDimensions() {\n        this.dimensions$.next({\n            innerHeight: window.innerHeight - PADDING,\n            innerWidth: window.innerWidth - this.getScrollbarWidth() - PADDING,\n        });\n    }\n\n    private getScrollbarWidth(): number {\n        return window.innerWidth - document.documentElement.clientWidth;\n    }\n\n    private calcDockWidth(\n        conf: SimpleSidebarConfiguration,\n        isOpen: boolean,\n        dim: Dimensions\n    ): string {\n        if (isOpen && !conf.mobile) {\n            return DEFAULT_WIDTH;\n        }\n\n        if (conf.mobile) {\n            return `${dim.innerWidth}px`;\n        } else {\n            return DEFAULT_DOCK_WIDTH;\n        }\n    }\n}\n","<div\r\n    *ngIf=\"configuration$ | async as conf\"\r\n    class=\"dock\"\r\n    [ngClass]=\"{ 'dock-open': isOpen$ | async, 'dock-mobile': conf.mobile }\"\r\n    [ngStyle]=\"dockStyle$ | async\"\r\n>\r\n    <span *ngIf=\"conf.mobile && conf.mobileTitle\">{{ conf.mobileTitle }}</span>\r\n\r\n    <!-- default items, like open/bottom buttons -->\r\n    <div class=\"sidebar-header\">\r\n        <i\r\n            *ngIf=\"(isOpen$ | async) && conf.closeIcon\"\r\n            class=\"menu-opener pointer\"\r\n            [class]=\"conf.closeIcon\"\r\n            (click)=\"closeSidebar()\"\r\n        ></i>\r\n        <i\r\n            *ngIf=\"!(isOpen$ | async) && conf.openIcon\"\r\n            class=\"menu-opener pointer\"\r\n            [class]=\"conf.openIcon\"\r\n            (click)=\"openSidebar()\"\r\n        ></i>\r\n    </div>\r\n    <lib-sidebar-container\r\n        [configuration]=\"configuration$ | async\"\r\n        [itemsBottom]=\"itemsBottom$ | async\"\r\n        [itemsTop]=\"itemsTop$ | async\"\r\n        [isOpen]=\"isOpen$ | async\"\r\n        [colors]=\"colors$ | async\"\r\n        [ngStyle]=\"sidedbarStyle$ | async\"\r\n        (closeDock)=\"closeSidebar()\"\r\n    ></lib-sidebar-container>\r\n</div>\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { NgSimpleSidebarComponent } from './ng-simple-sidebar.component';\nimport { SidebarItemComponent } from './components/sidebar-item.component';\nimport { SidebarItemIconComponent } from './components/sidebar-item-icon.component';\nimport { SidebarContainerComponent } from './components/sidebar-container.component';\n\n@NgModule({\n    declarations: [NgSimpleSidebarComponent, SidebarItemComponent, SidebarItemIconComponent, SidebarContainerComponent],\n    imports: [CommonModule, RouterModule],\n    exports: [NgSimpleSidebarComponent]\n})\nexport class NgSimpleSidebarModule {}\n","/**\r\n * Configuration Object for SimpleSidebar\r\n */\r\nexport class SimpleSidebarConfiguration {\r\n    /**\r\n     * Icon to open the sidebar as CSS class string (optional, to remove,\r\n     * do not set it)\r\n     */\r\n    openIcon?: string;\r\n\r\n    /**\r\n     * Icon to close the sidebar as CSS class string (optional, to remove,\r\n     * do not set it)\r\n     */\r\n    closeIcon?: string;\r\n\r\n    /**\r\n     * Color configuration for darkMode and normal view (optional)\r\n     */\r\n    colors?: SimpleSidebarColors;\r\n\r\n    /**\r\n     * In default mode the sidebar minimize after click on a link (optional)\r\n     */\r\n    closeAfterClick?: boolean;\r\n\r\n    /**\r\n     * Set mode for desktop or mobile page (optional)\r\n     */\r\n    mobile?: boolean;\r\n\r\n    /**\r\n     * CSS positioning mode for the dock (optional)\r\n     */\r\n    position?: 'sticky' | 'fixed';\r\n\r\n    /**\r\n     * Title, which got written in mobile mode (optional)\r\n     */\r\n    mobileTitle?: string;\r\n}\r\n\r\nexport interface SimpleSidebarColors {\r\n    darkMode?: boolean;\r\n    background?: string;\r\n    font?: string;\r\n    darkModeBackground?: string;\r\n    darkModeFont?: string;\r\n}\r\n\r\nexport interface SimpleSidebarAbstractColors {\r\n    darkMode?: boolean;\r\n    fColor: string;\r\n    bColor: string;\r\n}\r\n","/*\n * Public API Surface of ng-simple-sidebar\n */\n\nexport * from './lib/ng-simple-sidebar.module';\nexport * from './lib/ng-simple-sidebar.component';\nexport * from './lib/ng-simple-sidebar.service';\n\n// models / classes\nexport * from './lib/models/sidebar-configuration';\nexport * from './lib/models/sidebar-item';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i3.SidebarItemIconComponent","i2.SidebarItemComponent","i1.NgSimpleSidebarService","i2","i3.SidebarContainerComponent"],"mappings":"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"}